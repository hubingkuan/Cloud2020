server:
  port: 7001

eureka:
  instance:
    hostname: localhost #eureka服务端的实例名称 如果配置的单击的eureka 则设置为localhost
  client:
    #false表示不向服务中心注册自己
    register-with-eureka: false
    #false表示自己端就是注册中心 我的职责就是维护服务实例 并不需要去检索服务
    fetch-registry: false
    #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址
    service-url:
      # 指向其他集群的eureka
      #defaultZone: http://eureka7002.com:7002/eureka/
      defaultZone: http://localhost:7001/eureka/ # 单机的话 指向自己
  server:
    enable-self-preservation: false #关闭自我保护机制 保证不可用服务被及时剔除
    eviction-interval-timer-in-ms: 2000 # eureka server清理无效节点的时间间隔，默认60000毫秒，即60秒


  # Eureka的自我保护模式
  #在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。
  # 它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解:好死不如赖活着
  # 综上，自我保护模式是一种应对网络异常的安全保护措施。
  # 它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留)也不盲目注销任何健康的微服务。
  # 使用自我保护模式，可以让Eureka集群更加的健壮、稳定。
  #
  #
  # 自我保护机制:默认情况下EurekaClient定时向EurekaServer端发送心跳包
  # 如果Eureka在server端在一定时间内(默认90秒)没有收到EurekaClient发送心跳包，
  # 便会直接从服务注册列表中剔除该服务，但是在短时间( 90秒中)内丢失了大量的服务实例心跳，
  # 这时候EurekaServer会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是EurekaClient为出现宕机，
  # 此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，
  # 因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的)