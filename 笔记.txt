服务注册中心：
1、Eureka(已停更)
2、zookeeper
3、Consul
4、Nacos(推荐)

服务调用：
1、Ribbon(推荐)
2、LoadBalancer
3、Feign(已停更)
4、OpenFeign(推荐)

服务降级
1、Hystrix(可以用)
2、resilience4j
3、Alibaba Sentienl(推荐)

服务网关
1、Zuul
2、gateWay(推荐)

服务配置
1、Config(可以用)
2、Nacos(推荐)

服务总线
1、Bus(可以用)
2、Nacos(推荐)


什么是CAP？
c:Consistency(强一致性)
A:Availability(可用性)
P:Partition tolerance(分区容错性)
CAP理论关注粒度是数据，而不是整体系统设计的策略
最多只能同时较好的满足2个
CAP理论的核心是:一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性
因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类
CA：单点集群，满足一致性，可用的系统，但通常在可扩展性上不太强大
CP(Zookeeper/consul)：满足一致性，分区容错性的系统，通常性能不能特别高
AP(Eureka)：满足可用性，分区容忍性的系统，通常可能对一致性要求低一些

Ribbon本地负载均衡客户端  VS  Nginx服务端负载均衡区别
Nginx是服务器负载均衡，客户端所有与请求都会交给nginx，然后由nginx实现转发请求
即负载均衡是由服务端实现的。
Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取到注册信息服务列表
之后缓存到JVM本地，而在本地实现RPC远程服务调用技术。

负载均衡算法：rest接口第几次请求数%服务器集群总数量=实际调用服务器位置下标，每次服务都会重启rest接口计数从1记起


OpenFeign能干什么：
Feign旨在使编写java Http客户端变得更加容易
在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模板化的调用方法。
但在实际开发中，由于对服务一栏的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个
微服务自行封装一些客户端类来包装这些依赖服务的调用，所以Feign在此基础上做了进一步封装，由他来帮助
我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它
(以前是Dao接口上面标注Mapper注解，现在是一个微服务接口上面标注yigFeign注解即可)，
就可以完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量

Feign集成了Ribbon
利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，
通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用

分布式系统面临的问题:复杂分布式体系结构中应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败，
这样的话那么整条调用关系都会报错
服务雪崩：多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。
如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.
对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。
比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。
这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统

Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，
比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。
“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝)，
向调用方返回一个符合预期的、可处理的备选响应（FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，
这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。

服务降级：服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback
哪些情况会出现服务降级：1、程序运行异常 2、服务超时 3、服务熔断触发服务降级 4、线程池/信号量打满也会导致服务降级


服务熔断：当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，
快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。

服务限流：通过对并发访问/请求进行限速或者一个时间窗口内的的请求进行限速来保护系统，
一旦达到限制速率则可以拒绝服务(定向到错误页或告知资源没有了)、排队或等待(比如秒杀、评论、下单)、
降级(返回兜底数据或默认数据，如商品详情页库存默认有货)。
常见的限流有：限制总并发数(比如数据库连接池、线程池)、限制瞬时并发数(如nginx的limit_conn模块，用来限制瞬时并发连接数)、
限制时间窗口内的平均速率(如Guava的RateLimiter、nginx的limit_req模块，限制每秒的平均速率)；其他还有如限制远程接口调用速率、
限制MQ的消费速率。另外还可以根据网络连接数、网络流量、CPU或内存负载等来限流。